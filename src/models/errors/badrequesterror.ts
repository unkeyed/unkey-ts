/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type BadRequestErrorData = {
  /**
   * A unique id for this request. Please always provide this to support.
   */
  requestId: string;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string | undefined;
  /**
   * HTTP status code
   */
  status: number;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title: string;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type: string;
  /**
   * Optional list of individual error details
   */
  errors: Array<components.ValidationError>;
};

export class BadRequestError extends Error {
  /**
   * A unique id for this request. Please always provide this to support.
   */
  requestId: string;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string | undefined;
  /**
   * HTTP status code
   */
  status: number;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title: string;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type: string;
  /**
   * Optional list of individual error details
   */
  errors: Array<components.ValidationError>;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(err: BadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.requestId = err.requestId;
    this.detail = err.detail;
    if (err.instance != null) this.instance = err.instance;
    this.status = err.status;
    this.title = err.title;
    this.type = err.type;
    this.errors = err.errors;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestId: z.string(),
  detail: z.string(),
  instance: z.string().optional(),
  status: z.number().int(),
  title: z.string(),
  type: z.string(),
  errors: z.array(components.ValidationError$inboundSchema),
})
  .transform((v) => {
    return new BadRequestError(v);
  });

/** @internal */
export type BadRequestError$Outbound = {
  requestId: string;
  detail: string;
  instance?: string | undefined;
  status: number;
  title: string;
  type: string;
  errors: Array<components.ValidationError$Outbound>;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    requestId: z.string(),
    detail: z.string(),
    instance: z.string().optional(),
    status: z.number().int(),
    title: z.string(),
    type: z.string(),
    errors: z.array(components.ValidationError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
