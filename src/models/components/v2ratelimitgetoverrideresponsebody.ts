/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2RatelimitGetOverrideResponseBody = {
  /**
   * The id of the namespace.
   */
  namespaceId: string;
  /**
   * The id of the override.
   */
  overrideId: string;
  /**
   * The duration in milliseconds for the rate limit window.
   */
  duration: number;
  /**
   * Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
   */
  identifier: string;
  /**
   * The maximum number of requests allowed.
   */
  limit: number;
};

/** @internal */
export const V2RatelimitGetOverrideResponseBody$inboundSchema: z.ZodType<
  V2RatelimitGetOverrideResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespaceId: z.string(),
  overrideId: z.string(),
  duration: z.number().int(),
  identifier: z.string(),
  limit: z.number().int(),
});

/** @internal */
export type V2RatelimitGetOverrideResponseBody$Outbound = {
  namespaceId: string;
  overrideId: string;
  duration: number;
  identifier: string;
  limit: number;
};

/** @internal */
export const V2RatelimitGetOverrideResponseBody$outboundSchema: z.ZodType<
  V2RatelimitGetOverrideResponseBody$Outbound,
  z.ZodTypeDef,
  V2RatelimitGetOverrideResponseBody
> = z.object({
  namespaceId: z.string(),
  overrideId: z.string(),
  duration: z.number().int(),
  identifier: z.string(),
  limit: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2RatelimitGetOverrideResponseBody$ {
  /** @deprecated use `V2RatelimitGetOverrideResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2RatelimitGetOverrideResponseBody$inboundSchema;
  /** @deprecated use `V2RatelimitGetOverrideResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    V2RatelimitGetOverrideResponseBody$outboundSchema;
  /** @deprecated use `V2RatelimitGetOverrideResponseBody$Outbound` instead. */
  export type Outbound = V2RatelimitGetOverrideResponseBody$Outbound;
}

export function v2RatelimitGetOverrideResponseBodyToJSON(
  v2RatelimitGetOverrideResponseBody: V2RatelimitGetOverrideResponseBody,
): string {
  return JSON.stringify(
    V2RatelimitGetOverrideResponseBody$outboundSchema.parse(
      v2RatelimitGetOverrideResponseBody,
    ),
  );
}

export function v2RatelimitGetOverrideResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2RatelimitGetOverrideResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2RatelimitGetOverrideResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2RatelimitGetOverrideResponseBody' from JSON`,
  );
}
