/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ValidationError,
  ValidationError$inboundSchema,
  ValidationError$Outbound,
  ValidationError$outboundSchema,
} from "./validationerror.js";

export type BadRequestErrorDetails = {
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   */
  instance?: string | undefined;
  /**
   * HTTP status code
   */
  status: number;
  /**
   * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
   */
  title: string;
  /**
   * A URI reference to human-readable documentation for the error.
   */
  type: string;
  /**
   * Optional list of individual error details
   */
  errors: Array<ValidationError>;
};

/** @internal */
export const BadRequestErrorDetails$inboundSchema: z.ZodType<
  BadRequestErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  detail: z.string(),
  instance: z.string().optional(),
  status: z.number().int(),
  title: z.string(),
  type: z.string(),
  errors: z.array(ValidationError$inboundSchema),
});

/** @internal */
export type BadRequestErrorDetails$Outbound = {
  detail: string;
  instance?: string | undefined;
  status: number;
  title: string;
  type: string;
  errors: Array<ValidationError$Outbound>;
};

/** @internal */
export const BadRequestErrorDetails$outboundSchema: z.ZodType<
  BadRequestErrorDetails$Outbound,
  z.ZodTypeDef,
  BadRequestErrorDetails
> = z.object({
  detail: z.string(),
  instance: z.string().optional(),
  status: z.number().int(),
  title: z.string(),
  type: z.string(),
  errors: z.array(ValidationError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestErrorDetails$ {
  /** @deprecated use `BadRequestErrorDetails$inboundSchema` instead. */
  export const inboundSchema = BadRequestErrorDetails$inboundSchema;
  /** @deprecated use `BadRequestErrorDetails$outboundSchema` instead. */
  export const outboundSchema = BadRequestErrorDetails$outboundSchema;
  /** @deprecated use `BadRequestErrorDetails$Outbound` instead. */
  export type Outbound = BadRequestErrorDetails$Outbound;
}

export function badRequestErrorDetailsToJSON(
  badRequestErrorDetails: BadRequestErrorDetails,
): string {
  return JSON.stringify(
    BadRequestErrorDetails$outboundSchema.parse(badRequestErrorDetails),
  );
}

export function badRequestErrorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestErrorDetails' from JSON`,
  );
}
